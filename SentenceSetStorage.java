import java.awt.Dimension;
import java.awt.Point;
import java.awt.Rectangle;
import java.util.Stack;
import java.util.Vector;

import javax.swing.SwingUtilities;
import javax.swing.tree.DefaultMutableTreeNode;

//import SentenceSetStorage.NodeStorage;

//import SentenceSetStorage.NodeStorage;

//this is the tool to transform a string to a STree
//and to transform a STree to a string
//the user shoudl build the tool first and then call the function to get goals achieved
public class SentenceSetStorage {
	SentenceTree sentenceTree;
	TreeMode treeMode;
	SentenceTree.STree tree;
	Vector<NodeStorage> store = new Vector<NodeStorage>();
	String output;
	static String newline = System.getProperty("line.separator");

	public SentenceSetStorage(Grammar2 g, LMenuBar menu) {
		Plain plain = new Plain(g);
		treeMode = new TreeMode(plain);
		sentenceTree = new SentenceTree(treeMode);
		treeMode.teacherMode();
	}

	// todo
	/*
	 * importing helper function return true if the string is valid to form a
	 * STree return false otherwise this tool assumes the user only uses files
	 * generated by the program but in case there is any thing wrong
	 */
	public boolean validString(String input) {
		return true;
	}

	// importing help function for importing answeing progress
	private NodeStorage transformTXT2(Vector<String> block) {
		NodeStorage r = new NodeStorage();
		r.index = block.elementAt(0).split(":")[1];
		r.type = block.elementAt(1).split(":")[1];
		if (r.type.equals("sentence")) {
			String sentence = block.elementAt(2).split(":")[1];
			if (sentence.equals("null")) {
				sentence = "";
			}
			r.name = sentence;

			String meaning = block.elementAt(3).split(":")[1];
			if (meaning.equals("null")) {
				meaning = "";
			}
			r.meaning = meaning;

			String structure = block.elementAt(4).split(":")[1];
			if (structure.equals("null")) {
				structure = "";
			}
			r.structure = structure;
			String response=block.elementAt(5).split(":")[1];
			r.response=response;
			
			String correct=block.elementAt(6);
			r.correct=correct;

		} else if (r.type.equals("folder")) {
			String name = block.elementAt(2).split(":")[1];
			if (name.equals("null")) {
				name = "";
			}
			r.name = name;
		} else if (r.type.equals("instruction")) {
			String instruction = block.elementAt(2).split(":")[1];
			if (instruction.equals("null")) {
				instruction = "";
			}
			r.instruction = instruction;
			r.name = "instruction";
		}

		return r;
	}

	
	
	
	
	// importing help function for importing homework
		private NodeStorage transformTXT(Vector<String> block) {
			NodeStorage r = new NodeStorage();
			r.index = block.elementAt(0).split(":")[1];
			r.type = block.elementAt(1).split(":")[1];
			if (r.type.equals("sentence")) {
				String sentence = block.elementAt(2).split(":")[1];
				if (sentence.equals("null")) {
					sentence = "";
				}
				r.name = sentence;

				String meaning = block.elementAt(3).split(":")[1];
				if (meaning.equals("null")) {
					meaning = "";
				}
				r.meaning = meaning;

				String structure = block.elementAt(4).split(":")[1];
				if (structure.equals("null")) {
					structure = "";
				}
				r.structure = structure;

			} else if (r.type.equals("folder")) {
				String name = block.elementAt(2).split(":")[1];
				if (name.equals("null")) {
					name = "";
				}
				r.name = name;
			} else if (r.type.equals("instruction")) {
				String instruction = block.elementAt(2).split(":")[1];
				if (instruction.equals("null")) {
					instruction = "";
				}
				r.instruction = instruction;
				r.name = "instruction";
			}

			return r;
		}

	
	
	// import help function
	private IndexNode createNode(NodeStorage store) {
		IndexNode r = new IndexNode(store.index, store.name, store.type);
		System.out.println("creating nodes");
		if (store.type.equals("sentence")) {
			System.out.println("creating a sentence");
			TreeMode.Tree tree = treeMode.createNewTree2(store.name, store.meaning, store.structure);
			r.tree = tree;
			r.structure=store.structure;
			if(store.correct.equals("Incorrect")){
				r.correct=-1;
			}else if(store.correct.equals("Correct")){
				r.correct=1;
			}
			r.response=store.response;
			
		}

		else if (store.type.equals("instruction")) {
			System.out.println("creating an instruction");
			r.instruction = store.instruction;
			System.out.println("instructionx is"+r.instruction);
		} else {
			System.out.println("creating a folder");
		}

		return r;
	}
	
	//export as homework
	public String outputTXT2(SentenceTree.STree tree) {
		String r = "";
		r += tree.root.toString() + newline;
		r += "*" + newline;
		Vector<NodeStorage> store = getStorageStructure(tree);
		for (NodeStorage x : store) {
			r += "index:" + x.index + newline;
			r += "type:" + x.type + newline;
			if (x.type.equals("folder")) {
				r += "name:" + x.name + newline;
			} else if (x.type .equals("instruction")) {
				if(x.instruction.equals("")){
					r += "instruction:" + "null" + newline;
				}
				else{r += "instruction:" + x.instruction + newline;}
			} else if (x.type.equals("sentence")) {
				if(x.name.equals("")){
					r += "sentence:" + "null" + newline;
				}else{
				r += "sentence:" + x.name + newline;}
				if(x.meaning.equals("")){
					r += "meaning:" + "null" + newline;
				}else{
				r += "meaning:" + x.meaning + newline;}
				
				r += "response:" + x.response + newline;
				r+=x.correct+newline;
				
			}
			r += "*" + newline;
		}
		return r;
	}

	//export answering progress
	public String outputTXT3(SentenceTree.STree tree) {
		String r = "";
		r += tree.root.toString() + newline;
		r += "*" + newline;
		Vector<NodeStorage> store = getStorageStructure(tree);
		for (NodeStorage x : store) {
			r += "index:" + x.index + newline;
			r += "type:" + x.type + newline;
			if (x.type.equals("folder")) {
				r += "name:" + x.name + newline;
			} else if (x.type .equals("instruction")) {
				if(x.instruction.equals("")){
					r += "instruction:" + "null" + newline;
				}
				else{r += "instruction:" + x.instruction + newline;}
			} else if (x.type.equals("sentence")) {
				if(x.name.equals("")){
					r += "sentence:" + "null" + newline;
				}else{
				r += "sentence:" + x.name + newline;}
				if(x.meaning.equals("")){
					r += "meaning:" + "null" + newline;
				}else{
				r += "meaning:" + x.meaning + newline;}
				r += "structure:"+ x.structure+newline;
				r += "response:" + x.response + newline;
				r+=x.correct+newline;
				
			}
			r += "*" + newline;
		}
		return r;
	}
	/*
	 * output helper function the order of NodeStorage in the vector returned is
	 * the BFS order of nodes in STree which makes sure the current node
	 * explored has all its ancestors ready in front of the vector when we are
	 * trying to connect those nodes
	 */
	private Vector<NodeStorage> getStorageStructure(SentenceTree.STree tree) {
		Vector<NodeStorage> r = new Vector<NodeStorage>();
		DefaultMutableTreeNode root = tree.root;
		Stack<IndexNode> process = new Stack<IndexNode>();
		for (int i = 0; i < root.getChildCount(); i++) {
			IndexNode now = (IndexNode) root.getChildAt(i);
			process.add(now);
		}

		while (process.size() > 0) {
			IndexNode now = process.firstElement();
			process.removeElementAt(0);
			NodeStorage nowStorage = new NodeStorage();
			nowStorage.index = now.index;
			nowStorage.type = now.type;
			String name = now.name;
			if (name.equals("")) {
				name = "null";
			}
			nowStorage.name = name;
			if (now.type.equals("instruction")) {
				String instruction = now.instruction;
				if (instruction.equals("")) {
					instruction = "null";
				}
				nowStorage.instruction = instruction;
			} else if (now.type.equals("sentence")) {
				System.out.println("sentence am here");
				String meaning = now.tree.meaning;
				if (meaning.equals("")) {
					meaning = "null";
				}
				nowStorage.meaning = meaning;

				// structure can be "null", "error", or regular bracket string
				// form
				String response = now.tree.bracketForm();				
				nowStorage.response = response;
				nowStorage.structure=now.structure;
				if(now.correct==1){
				nowStorage.correct="Correct";}
				else if(now.correct==0){
					System.out.println("incomplete");
					nowStorage.correct="Incomplete";
				}
				else{
					System.out.println("here incorrect");
					nowStorage.correct="Incorrect";	
				}
			}
			r.add(nowStorage);

			for (int i = 0; i < now.getChildCount(); i++) {
				IndexNode child = (IndexNode) now.getChildAt(i);
				process.add(child);
			}

		}

		return r;
	}

	// output function
	public String outputTXT(SentenceTree.STree tree) {
		String r = "";
		r += tree.root.toString() + newline;
		r += "*" + newline;
		Vector<NodeStorage> store = getStorageStructure(tree);
		for (NodeStorage x : store) {
			r += "index:" + x.index + newline;
			r += "type:" + x.type + newline;
			if (x.type.equals("folder")) {
				r += "name:" + x.name + newline;
			} else if (x.type .equals("instruction")) {
				if(x.instruction.equals("")){
					r += "instruction:" + "null" + newline;
				}
				else{r += "instruction:" + x.instruction + newline;}
			} else if (x.type.equals("sentence")) {
				if(x.name.equals("")){
					r += "sentence:" + "null" + newline;
				}else{
				r += "sentence:" + x.name + newline;}
				if(x.meaning.equals("")){
					r += "meaning:" + "null" + newline;
				}else{
				r += "meaning:" + x.meaning + newline;}
				
				r += "structure:" + x.structure + newline;
//				r+=x.correct+newline;
				
			}
			r += "*" + newline;
		}
		return r;
	}

	// importing function
	//for identifier=1; import homework
	//for identifier=2; import answering progress
	public void setTree(String input, final SentenceTree.STree stree,int identifier) {
		System.out.println("I am here in setTree");
		Vector<String> lines = new Vector<String>();
		
		String[]tokens =input.split("-|\\.");
		for (String x : input.split("\r\n|\r|\n")) {
			lines.add(x);
			System.out.println("nl"+x+"nl");

		}
		DefaultMutableTreeNode root;
		if (lines.elementAt(0) != "*") {
			root = new DefaultMutableTreeNode(lines.elementAt(0));
			lines.removeElementAt(0);
		} else {
			root = new DefaultMutableTreeNode("");
		}
		System.out.println("I am here in changeRoot");
		stree.changeRoot(root);
		Vector<String> block = new Vector<String>();
		Vector<String> lines2=new Vector<String>();
		for(int i=0;i<lines.size();i++){
			if(!lines.elementAt(i).equals("")){
				lines2.add(lines.elementAt(i));
			}
		}
		for (int i = 1; i < lines2.size(); i++) {
			System.out.println("lo"+lines2.elementAt(i)+"lo");
			if (!lines2.elementAt(i).equals("*")) {
				
				System.out.println("not equal *");
				block.add(lines2.elementAt(i));
			} 
			else
				{System.out.println("creating treenode in sentenceTree");
				NodeStorage nowStore;
				if(identifier==1){
				 nowStore = transformTXT(block);}
				else {
					 nowStore = transformTXT2(block);	
				}
				IndexNode now = createNode(nowStore);
				// attach the newly created node to the correct posistion
				now.attachTo(root);
				
				///not ultimately correct if the adding category button is enabled again
				if(now.type.equals("instruction")){
					stree.instructionNode=now;
				}
				block = new Vector<String>();
			}
		}
		
//		SwingUtilities.invokeLater(new Runnable(){
//
//			@Override
//			public void run() {
//				// TODO Auto-generated method stub
//				stree.setPreferredSize(stree.getPreferredSize());
//				System.out.println("stree's preferred size"+stree.getPreferredSize());
//			}
//			
//		});
		
	}

	public static void main(String[] args) {
	}
}
